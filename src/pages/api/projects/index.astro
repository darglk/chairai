---
/**
 * Projects API Endpoint
 *
 * POST /api/projects - Create a new project
 *
 * Authentication: Required (JWT)
 * Authorization: client role only
 */

import type { APIRoute } from "astro";
import { CreateProjectSchema } from "../../../lib/schemas";
import { ProjectService, ProjectError } from "../../../lib/services/project.service";
import { errorResponse, successResponse, parseRequestBody } from "../../../lib/api-utils";

export const prerender = false;

export const POST: APIRoute = async ({ request, locals }) => {
  try {
    // Authentication check (handled by middleware)
    const user = locals.user;
    if (!user) {
      return errorResponse("Wymagane uwierzytelnienie", "UNAUTHORIZED", 401);
    }

    // Authorization check - only clients can create projects
    if (user.role !== "client") {
      return errorResponse("Tylko klienci mogą tworzyć projekty", "FORBIDDEN", 403);
    }

    // Parse and validate request body
    const body = await parseRequestBody(request);
    const validationResult = CreateProjectSchema.safeParse(body);

    if (!validationResult.success) {
      return errorResponse(
        "Błędne dane wejściowe",
        "VALIDATION_ERROR",
        400,
        validationResult.error.flatten().fieldErrors
      );
    }

    // Create project using service
    const projectService = new ProjectService(locals.supabase);
    const project = await projectService.createProject(validationResult.data, user.id);

    // Return created project
    return successResponse(project, 201);
  } catch (error) {
    // Handle known business logic errors
    if (error instanceof ProjectError) {
      return errorResponse(error.message, error.code, error.statusCode);
    }

    // Handle unexpected errors
    return errorResponse("Wystąpił nieoczekiwany błąd", "INTERNAL_SERVER_ERROR", 500);
  }
};
---
